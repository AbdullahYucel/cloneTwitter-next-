{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\YUCEL\\\\Desktop\\\\clone\\\\components\\\\hooks\\\\use-window-size.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useState, useEffect } from 'react'; // Usage\n\nfunction App() {\n  const size = useWindowSize();\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 5\n    }\n  }, size.width, \"px / \", size.height, \"px\");\n} // Hook\n\n\nfunction useWindowSize() {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const {\n    0: windowSize,\n    1: setWindowSize\n  } = useState({\n    width: undefined,\n    height: undefined\n  });\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    } // Add event listener\n\n\n    window.addEventListener(\"resize\", handleResize); // Call handler right away so state gets updated with initial window size\n\n    handleResize(); // Remove event listener on cleanup\n\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n}\n\nexport default useWindowSize;","map":{"version":3,"sources":["C:/Users/YUCEL/Desktop/clone/components/hooks/use-window-size.js"],"names":["React","useState","useEffect","App","size","useWindowSize","width","height","windowSize","setWindowSize","undefined","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CAEA;;AACA,SAASC,GAAT,GAAe;AACb,QAAMC,IAAI,GAAGC,aAAa,EAA1B;AAEA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,IAAI,CAACE,KADR,WACoBF,IAAI,CAACG,MADzB,OADF;AAKD,C,CAED;;;AACA,SAASF,aAAT,GAAyB;AACvB;AACA;AACA,QAAM;AAAA,OAACG,UAAD;AAAA,OAAaC;AAAb,MAA8BR,QAAQ,CAAC;AAC3CK,IAAAA,KAAK,EAAEI,SADoC;AAE3CH,IAAAA,MAAM,EAAEG;AAFmC,GAAD,CAA5C;AAKAR,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,aAASS,YAAT,GAAwB;AACtB;AACAF,MAAAA,aAAa,CAAC;AACZH,QAAAA,KAAK,EAAEM,MAAM,CAACC,UADF;AAEZN,QAAAA,MAAM,EAAEK,MAAM,CAACE;AAFH,OAAD,CAAb;AAID,KARa,CAUd;;;AACAF,IAAAA,MAAM,CAACG,gBAAP,CAAwB,QAAxB,EAAkCJ,YAAlC,EAXc,CAad;;AACAA,IAAAA,YAAY,GAdE,CAgBd;;AACA,WAAO,MAAMC,MAAM,CAACI,mBAAP,CAA2B,QAA3B,EAAqCL,YAArC,CAAb;AACD,GAlBQ,EAkBN,EAlBM,CAAT,CARuB,CA0Bf;;AAER,SAAOH,UAAP;AACD;;AAED,eAAeH,aAAf","sourcesContent":["import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\n\r\n// Usage\r\nfunction App() {\r\n  const size = useWindowSize();\r\n\r\n  return (\r\n    <div>\r\n      {size.width}px / {size.height}px\r\n    </div>\r\n  );\r\n}\r\n\r\n// Hook\r\nfunction useWindowSize() {\r\n  // Initialize state with undefined width/height so server and client renders match\r\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\r\n  const [windowSize, setWindowSize] = useState({\r\n    width: undefined,\r\n    height: undefined,\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Handler to call on window resize\r\n    function handleResize() {\r\n      // Set window width/height to state\r\n      setWindowSize({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n      });\r\n    }\r\n    \r\n    // Add event listener\r\n    window.addEventListener(\"resize\", handleResize);\r\n    \r\n    // Call handler right away so state gets updated with initial window size\r\n    handleResize();\r\n    \r\n    // Remove event listener on cleanup\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []); // Empty array ensures that effect is only run on mount\r\n\r\n  return windowSize;\r\n}\r\n\r\nexport default useWindowSize"]},"metadata":{},"sourceType":"module"}